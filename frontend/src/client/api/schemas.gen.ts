// This file is auto-generated by @hey-api/openapi-ts

export const AdapterSchema = {
  title: 'Adapter',
  required: ['module_name', 'project_link', 'name', 'desc', 'author', 'homepage', 'is_official'],
  type: 'object',
  properties: {
    module_name: {
      title: 'Module Name',
      type: 'string'
    },
    project_link: {
      title: 'Project Link',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    desc: {
      title: 'Desc',
      type: 'string'
    },
    author: {
      title: 'Author',
      type: 'string'
    },
    homepage: {
      title: 'Homepage',
      type: 'string'
    },
    tags: {
      title: 'Tags',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleTag'
      }
    },
    is_official: {
      title: 'Is Official',
      type: 'boolean'
    },
    is_download: {
      title: 'Is Download',
      type: 'boolean'
    }
  }
} as const

export const AddProjectDataSchema = {
  title: 'AddProjectData',
  required: ['project_name', 'project_dir', 'mirror_url'],
  type: 'object',
  properties: {
    project_name: {
      title: 'Project Name',
      type: 'string'
    },
    project_dir: {
      title: 'Project Dir',
      type: 'string'
    },
    mirror_url: {
      title: 'Mirror Url',
      type: 'string'
    },
    adapters: {
      title: 'Adapters',
      type: 'array',
      items: {
        type: 'string'
      },
      default: []
    },
    plugins: {
      title: 'Plugins',
      type: 'array',
      items: {
        type: 'string'
      },
      default: []
    },
    plugin_dirs: {
      title: 'Plugin Dirs',
      type: 'array',
      items: {
        type: 'string'
      },
      default: []
    },
    builtin_plugins: {
      title: 'Builtin Plugins',
      type: 'array',
      items: {
        type: 'string'
      },
      default: []
    }
  }
} as const

export const Body_search_nonebot_store_item_v1_store_nonebot_search_postSchema = {
  title: 'Body_search_nonebot_store_item_v1_store_nonebot_search_post',
  required: ['data'],
  type: 'object',
  properties: {
    data: {
      $ref: '#/components/schemas/SearchRequest'
    }
  }
} as const

export const ConfigTypeSchema = {
  title: 'ConfigType',
  enum: ['project', 'toml'],
  type: 'string',
  description: 'An enumeration.'
} as const

export const CreateProjectDataSchema = {
  title: 'CreateProjectData',
  required: [
    'is_bootstrap',
    'project_name',
    'project_dir',
    'mirror_url',
    'drivers',
    'adapters',
    'use_src'
  ],
  type: 'object',
  properties: {
    is_bootstrap: {
      title: 'Is Bootstrap',
      type: 'boolean'
    },
    project_name: {
      title: 'Project Name',
      type: 'string'
    },
    project_dir: {
      title: 'Project Dir',
      type: 'string'
    },
    mirror_url: {
      title: 'Mirror Url',
      type: 'string'
    },
    drivers: {
      title: 'Drivers',
      type: 'array',
      items: {
        $ref: '#/components/schemas/nb_cli_plugin_webui__app__schemas__ModuleInfo'
      }
    },
    adapters: {
      title: 'Adapters',
      type: 'array',
      items: {
        $ref: '#/components/schemas/nb_cli_plugin_webui__app__schemas__ModuleInfo'
      }
    },
    use_src: {
      title: 'Use Src',
      type: 'boolean'
    }
  }
} as const

export const DriverSchema = {
  title: 'Driver',
  required: ['module_name', 'project_link', 'name', 'desc', 'author', 'homepage', 'is_official'],
  type: 'object',
  properties: {
    module_name: {
      title: 'Module Name',
      type: 'string'
    },
    project_link: {
      title: 'Project Link',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    desc: {
      title: 'Desc',
      type: 'string'
    },
    author: {
      title: 'Author',
      type: 'string'
    },
    homepage: {
      title: 'Homepage',
      type: 'string'
    },
    tags: {
      title: 'Tags',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleTag'
      }
    },
    is_official: {
      title: 'Is Official',
      type: 'boolean'
    },
    is_download: {
      title: 'Is Download',
      type: 'boolean'
    }
  }
} as const

export const FileInfoSchema = {
  title: 'FileInfo',
  required: ['name', 'is_dir', 'path', 'modified_time', 'absolute_path'],
  type: 'object',
  properties: {
    name: {
      title: 'Name',
      type: 'string'
    },
    is_dir: {
      title: 'Is Dir',
      type: 'boolean'
    },
    path: {
      title: 'Path',
      type: 'string'
    },
    modified_time: {
      title: 'Modified Time',
      type: 'string'
    },
    absolute_path: {
      title: 'Absolute Path',
      type: 'string'
    }
  }
} as const

export const FileResponseSchema = {
  title: 'FileResponse',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      type: 'array',
      items: {
        $ref: '#/components/schemas/FileInfo'
      }
    }
  }
} as const

export const GenericResponse_List_nb_cli_plugin_webui_app_handlers_process_schemas_ProcessLog__Schema =
  {
    title: 'GenericResponse[List[nb_cli_plugin_webui.app.handlers.process.schemas.ProcessLog]]',
    required: ['detail'],
    type: 'object',
    properties: {
      detail: {
        title: 'Detail',
        type: 'array',
        items: {
          $ref: '#/components/schemas/ProcessLog'
        }
      }
    }
  } as const

export const GenericResponse_List_str__Schema = {
  title: 'GenericResponse[List[str]]',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      type: 'array',
      items: {
        type: 'string'
      }
    }
  }
} as const

export const GenericResponse_NoneBotProjectMeta_Schema = {
  title: 'GenericResponse[NoneBotProjectMeta]',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      $ref: '#/components/schemas/NoneBotProjectMeta'
    }
  }
} as const

export const GenericResponse_ProjectTomlDetail_Schema = {
  title: 'GenericResponse[ProjectTomlDetail]',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      $ref: '#/components/schemas/ProjectTomlDetail'
    }
  }
} as const

export const GenericResponse_int_Schema = {
  title: 'GenericResponse[int]',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      type: 'integer'
    }
  }
} as const

export const GenericResponse_str_Schema = {
  title: 'GenericResponse[str]',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      type: 'string'
    }
  }
} as const

export const HTTPValidationErrorSchema = {
  title: 'HTTPValidationError',
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ValidationError'
      }
    }
  }
} as const

export const ListProjectResponseSchema = {
  title: 'ListProjectResponse',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/NoneBotProjectMeta'
      }
    }
  }
} as const

export const LogLevelSchema = {
  title: 'LogLevel',
  enum: ['STDOUT', 'INFO', 'WARNING', 'ERROR', 'DEBUG'],
  type: 'string',
  description: 'An enumeration.'
} as const

export const LoginRequestSchema = {
  title: 'LoginRequest',
  required: ['token', 'mark'],
  type: 'object',
  properties: {
    token: {
      title: 'Token',
      type: 'string'
    },
    mark: {
      title: 'Mark',
      type: 'string'
    }
  }
} as const

export const ModuleConfigChildSchema = {
  title: 'ModuleConfigChild',
  required: ['title', 'description', 'name', 'conf_type', 'enum', 'is_secret'],
  type: 'object',
  properties: {
    title: {
      title: 'Title',
      type: 'string'
    },
    description: {
      title: 'Description',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    default: {
      title: 'Default'
    },
    conf_type: {
      title: 'Conf Type',
      type: 'string'
    },
    enum: {
      title: 'Enum',
      type: 'array',
      items: {}
    },
    configured: {
      title: 'Configured'
    },
    is_secret: {
      title: 'Is Secret',
      type: 'boolean'
    },
    latest_change: {
      title: 'Latest Change',
      type: 'string',
      default: ''
    }
  }
} as const

export const ModuleConfigFatherSchema = {
  title: 'ModuleConfigFather',
  required: ['title', 'description', 'name', 'module_type', 'properties'],
  type: 'object',
  properties: {
    title: {
      title: 'Title',
      type: 'string'
    },
    description: {
      title: 'Description',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    module_type: {
      title: 'Module Type',
      anyOf: [
        {
          $ref: '#/components/schemas/ModuleType'
        },
        {
          $ref: '#/components/schemas/ConfigType'
        }
      ]
    },
    properties: {
      title: 'Properties',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleConfigChild'
      }
    }
  }
} as const

export const ModuleConfigResponseSchema = {
  title: 'ModuleConfigResponse',
  required: ['detail'],
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleConfigFather'
      }
    }
  }
} as const

export const ModuleConfigUpdateRequestSchema = {
  title: 'ModuleConfigUpdateRequest',
  required: ['env', 'conf_type', 'k'],
  type: 'object',
  properties: {
    env: {
      title: 'Env',
      type: 'string'
    },
    conf_type: {
      title: 'Conf Type',
      type: 'string'
    },
    k: {
      title: 'K',
      type: 'string'
    },
    v: {
      title: 'V'
    }
  }
} as const

export const ModuleTagSchema = {
  title: 'ModuleTag',
  required: ['label', 'color'],
  type: 'object',
  properties: {
    label: {
      title: 'Label',
      type: 'string'
    },
    color: {
      title: 'Color',
      type: 'string'
    }
  }
} as const

export const ModuleTypeSchema = {
  title: 'ModuleType',
  enum: ['plugin', 'adapter', 'driver'],
  type: 'string',
  description: 'An enumeration.'
} as const

export const NoneBotProjectMetaSchema = {
  title: 'NoneBotProjectMeta',
  required: [
    'project_id',
    'project_name',
    'project_dir',
    'mirror_url',
    'adapters',
    'drivers',
    'plugins',
    'plugin_dirs',
    'builtin_plugins'
  ],
  type: 'object',
  properties: {
    project_id: {
      title: 'Project Id',
      type: 'string'
    },
    project_name: {
      title: 'Project Name',
      type: 'string'
    },
    project_dir: {
      title: 'Project Dir',
      type: 'string'
    },
    mirror_url: {
      title: 'Mirror Url',
      type: 'string'
    },
    adapters: {
      title: 'Adapters',
      type: 'array',
      items: {
        $ref: '#/components/schemas/nb_cli_plugin_webui__app__schemas__ModuleInfo'
      }
    },
    drivers: {
      title: 'Drivers',
      type: 'array',
      items: {
        $ref: '#/components/schemas/nb_cli_plugin_webui__app__schemas__ModuleInfo'
      }
    },
    plugins: {
      title: 'Plugins',
      type: 'array',
      items: {
        $ref: '#/components/schemas/nb_cli_plugin_webui__app__schemas__Plugin'
      }
    },
    plugin_dirs: {
      title: 'Plugin Dirs',
      type: 'array',
      items: {
        type: 'string'
      }
    },
    builtin_plugins: {
      title: 'Builtin Plugins',
      type: 'array',
      items: {
        type: 'string'
      }
    },
    is_running: {
      title: 'Is Running',
      type: 'boolean',
      default: false
    },
    use_env: {
      title: 'Use Env',
      type: 'string',
      default: '.env'
    },
    use_run_script: {
      title: 'Use Run Script',
      type: 'boolean',
      default: false
    },
    run_script_name: {
      title: 'Run Script Name',
      type: 'string',
      default: 'bot.py'
    }
  }
} as const

export const ProcessLogSchema = {
  title: 'ProcessLog',
  required: ['message'],
  type: 'object',
  properties: {
    time: {
      title: 'Time',
      anyOf: [
        {
          type: 'string',
          format: 'date-time'
        },
        {
          type: 'string'
        }
      ]
    },
    level: {
      allOf: [
        {
          $ref: '#/components/schemas/LogLevel'
        }
      ],
      default: 'STDOUT'
    },
    message: {
      title: 'Message',
      type: 'string'
    }
  }
} as const

export const ProjectTomlDetailSchema = {
  title: 'ProjectTomlDetail',
  required: ['project_name', 'adapters', 'plugins', 'plugin_dirs', 'builtin_plugins'],
  type: 'object',
  properties: {
    project_name: {
      title: 'Project Name',
      type: 'string'
    },
    adapters: {
      title: 'Adapters',
      type: 'array',
      items: {
        type: 'object',
        additionalProperties: {
          type: 'string'
        }
      }
    },
    plugins: {
      title: 'Plugins',
      type: 'array',
      items: {
        type: 'string'
      }
    },
    plugin_dirs: {
      title: 'Plugin Dirs',
      type: 'array',
      items: {
        type: 'string'
      }
    },
    builtin_plugins: {
      title: 'Builtin Plugins',
      type: 'array',
      items: {
        type: 'string'
      }
    }
  }
} as const

export const SearchRequestSchema = {
  title: 'SearchRequest',
  required: ['module_type', 'content'],
  type: 'object',
  properties: {
    module_type: {
      $ref: '#/components/schemas/ModuleType'
    },
    tags: {
      title: 'Tags',
      type: 'array',
      items: {
        $ref: '#/components/schemas/nb_cli_plugin_webui__app__schemas__SearchTag'
      },
      default: []
    },
    content: {
      title: 'Content',
      type: 'string'
    }
  }
} as const

export const SimpleModelSchema = {
  title: 'SimpleModel',
  required: ['name', 'is_dir', 'path'],
  type: 'object',
  properties: {
    name: {
      title: 'Name',
      type: 'string'
    },
    is_dir: {
      title: 'Is Dir',
      type: 'boolean'
    },
    path: {
      title: 'Path',
      type: 'string'
    }
  }
} as const

export const StoreListResponseSchema = {
  title: 'StoreListResponse',
  required: ['detail', 'now_page', 'total_page', 'total_item'],
  type: 'object',
  properties: {
    detail: {
      title: 'Detail',
      anyOf: [
        {
          type: 'array',
          items: {
            $ref: '#/components/schemas/nb_cli_plugin_webui__app__schemas__Plugin'
          }
        },
        {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Adapter'
          }
        },
        {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Driver'
          }
        }
      ]
    },
    now_page: {
      title: 'Now Page',
      type: 'integer'
    },
    total_page: {
      title: 'Total Page',
      type: 'integer'
    },
    total_item: {
      title: 'Total Item',
      type: 'integer'
    }
  }
} as const

export const ValidationErrorSchema = {
  title: 'ValidationError',
  required: ['loc', 'msg', 'type'],
  type: 'object',
  properties: {
    loc: {
      title: 'Location',
      type: 'array',
      items: {
        anyOf: [
          {
            type: 'string'
          },
          {
            type: 'integer'
          }
        ]
      }
    },
    msg: {
      title: 'Message',
      type: 'string'
    },
    type: {
      title: 'Error Type',
      type: 'string'
    }
  }
} as const

export const VerifyRequestSchema = {
  title: 'VerifyRequest',
  required: ['jwt_token'],
  type: 'object',
  properties: {
    jwt_token: {
      title: 'Jwt Token',
      type: 'string'
    }
  }
} as const

export const nb_cli_plugin_webui__app__constants__SearchTagSchema = {
  title: 'SearchTag',
  enum: ['official', 'valid', 'latest', 'downloaded', 'author', 'tag'],
  type: 'string',
  description: 'An enumeration.'
} as const

export const nb_cli_plugin_webui__app__schemas__ModuleInfoSchema = {
  title: 'ModuleInfo',
  required: ['module_name', 'project_link', 'name', 'desc', 'author', 'homepage', 'is_official'],
  type: 'object',
  properties: {
    module_name: {
      title: 'Module Name',
      type: 'string'
    },
    project_link: {
      title: 'Project Link',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    desc: {
      title: 'Desc',
      type: 'string'
    },
    author: {
      title: 'Author',
      type: 'string'
    },
    homepage: {
      title: 'Homepage',
      type: 'string'
    },
    tags: {
      title: 'Tags',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleTag'
      }
    },
    is_official: {
      title: 'Is Official',
      type: 'boolean'
    },
    is_download: {
      title: 'Is Download',
      type: 'boolean'
    }
  }
} as const

export const nb_cli_plugin_webui__app__schemas__PluginSchema = {
  title: 'Plugin',
  required: [
    'module_name',
    'project_link',
    'name',
    'desc',
    'author',
    'homepage',
    'is_official',
    'valid',
    'version',
    'time',
    'skip_test'
  ],
  type: 'object',
  properties: {
    module_name: {
      title: 'Module Name',
      type: 'string'
    },
    project_link: {
      title: 'Project Link',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    desc: {
      title: 'Desc',
      type: 'string'
    },
    author: {
      title: 'Author',
      type: 'string'
    },
    homepage: {
      title: 'Homepage',
      type: 'string'
    },
    tags: {
      title: 'Tags',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleTag'
      }
    },
    is_official: {
      title: 'Is Official',
      type: 'boolean'
    },
    is_download: {
      title: 'Is Download',
      type: 'boolean'
    },
    type: {
      title: 'Type',
      type: 'string'
    },
    supported_adapters: {
      title: 'Supported Adapters',
      type: 'array',
      items: {
        type: 'string'
      }
    },
    valid: {
      title: 'Valid',
      type: 'boolean'
    },
    version: {
      title: 'Version',
      type: 'string'
    },
    time: {
      title: 'Time',
      type: 'string'
    },
    skip_test: {
      title: 'Skip Test',
      type: 'boolean'
    },
    config_detail: {
      title: 'Config Detail',
      type: 'object',
      default: {}
    }
  }
} as const

export const nb_cli_plugin_webui__app__schemas__SearchTagSchema = {
  title: 'SearchTag',
  required: ['label'],
  type: 'object',
  properties: {
    label: {
      $ref: '#/components/schemas/nb_cli_plugin_webui__app__constants__SearchTag'
    },
    text: {
      title: 'Text',
      type: 'string',
      default: ''
    }
  }
} as const

export const nb_cli_plugin_webui__app__store__schemas__ModuleInfoSchema = {
  title: 'ModuleInfo',
  required: [
    'module_name',
    'project_link',
    'name',
    'desc',
    'author',
    'homepage',
    'is_official',
    'module_type'
  ],
  type: 'object',
  properties: {
    module_name: {
      title: 'Module Name',
      type: 'string'
    },
    project_link: {
      title: 'Project Link',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    desc: {
      title: 'Desc',
      type: 'string'
    },
    author: {
      title: 'Author',
      type: 'string'
    },
    homepage: {
      title: 'Homepage',
      type: 'string'
    },
    tags: {
      title: 'Tags',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleTag'
      }
    },
    is_official: {
      title: 'Is Official',
      type: 'boolean'
    },
    is_download: {
      title: 'Is Download',
      type: 'boolean'
    },
    module_type: {
      title: 'Module Type',
      enum: ['module'],
      type: 'string'
    }
  }
} as const

export const nb_cli_plugin_webui__app__store__schemas__PluginSchema = {
  title: 'Plugin',
  required: [
    'module_name',
    'project_link',
    'name',
    'desc',
    'author',
    'homepage',
    'is_official',
    'valid',
    'version',
    'time',
    'skip_test',
    'module_type'
  ],
  type: 'object',
  properties: {
    module_name: {
      title: 'Module Name',
      type: 'string'
    },
    project_link: {
      title: 'Project Link',
      type: 'string'
    },
    name: {
      title: 'Name',
      type: 'string'
    },
    desc: {
      title: 'Desc',
      type: 'string'
    },
    author: {
      title: 'Author',
      type: 'string'
    },
    homepage: {
      title: 'Homepage',
      type: 'string'
    },
    tags: {
      title: 'Tags',
      type: 'array',
      items: {
        $ref: '#/components/schemas/ModuleTag'
      }
    },
    is_official: {
      title: 'Is Official',
      type: 'boolean'
    },
    is_download: {
      title: 'Is Download',
      type: 'boolean'
    },
    type: {
      title: 'Type',
      type: 'string'
    },
    supported_adapters: {
      title: 'Supported Adapters',
      type: 'array',
      items: {
        type: 'string'
      }
    },
    valid: {
      title: 'Valid',
      type: 'boolean'
    },
    version: {
      title: 'Version',
      type: 'string'
    },
    time: {
      title: 'Time',
      type: 'string'
    },
    skip_test: {
      title: 'Skip Test',
      type: 'boolean'
    },
    config_detail: {
      title: 'Config Detail',
      type: 'object',
      default: {}
    },
    module_type: {
      title: 'Module Type',
      enum: ['plugin'],
      type: 'string'
    }
  }
} as const
